{
	"for": {
		"prefix": "for",
		"body": [
			"for (${size_t} ${i} = ${1:0}; ${i} < ${2:length}; ${i}++)",
			"{",
			"	$3",
			"}"
		],
		"description": "Code snippet for 'for' loop"
	},
	"forr": {
		"prefix": "forr",
		"body": [
			"for (int ${i} = ${1:length} - 1; ${i} >= ${2:0}; ${i}--)",
			"{",
			"	$3",
			"}"
		],
		"description": "Code snippet for reverse 'for' loop"
	},
	"do": {
		"prefix": "do",
		"body": [
			"do",
			"{",
			"	$1",
			"} while($2);"
		],
		"description": "Code snippet for do...while loop"
	},
	"while": {
		"prefix": "while",
		"body": [
			"while ($1)",
			"{",
			"	$2",
			"}"
		],
		"description": "Code snippet for while loop"
	},
	"foreach": {
		"prefix": "foreach",
		"body": [
			"for(auto ${var} : ${collection_to_loop})",
			"{",
			"	$1",
			"}"
		],
		"description": "Code snippet for range-based for loop (c++11) statement"
	},
	"if": {
		"prefix": "if",
		"body": [
			"if ($1)",
			"{",
			"	$2",
			"}"
		],
		"description": "Code snippet for if statement"
	},
	"else": {
		"prefix": "else",
		"body": [
			"else",
			"{",
			"	$1",
			"}"
		],
		"description": "Code snippet for else statement"
	},
	"else if": {
		"prefix": "else if",
		"body": [
			"else if ($1)",
			"{",
			"	$2",
			"}"
		],
		"description": "Code snippet for else-if statement"
	},
	"enum": {
		"prefix": "enum",
		"body": [
			"enum ${MyEnum}",
			"{",
			"	$1",
			"};"
		],
		"description": "Code snippet for enum"
	},
	"enum class": {
		"prefix": "enum class",
		"body": [
			"enum class ${MyClass} $1 { $0 };"
		],
		"description": "Code snippet for enum class (c++11)"
	},
	"qlib namespace": {
		"prefix": "qnamespace",
		"body": [
			"namespace ${1:qlib} {",
			"$0",
			"} // namespace ${1:qlib}"
		],
		"description": "Code snippet for namespace"
	},
	"class plain": {
		"prefix": "qclass",
		"body": [
			"class ${1:name} {",
			"public:",
			"	$2",
			"private:",
			"	$3",
			"};"
		],
		"description": "Code snippet for plain class"
	},
	"struct": {
		"prefix": "struct",
		"body": [
			"struct ${MyStruct}",
			"{",
			"	$1",
			"};"
		],
		"description": "Code snippet for struct"
	},
	"try": {
		"prefix": "try",
		"body": [
			"try",
			"{",
			" $0",
			"}",
			"catch (const std::exception&)",
			"{",
			"	$1",
			"}"
		],
		"description": "Code snippet for try catch"
	},
	"union": {
		"prefix": "union",
		"body": [
			"union ${MyUnion}",
			"{",
			"	$1",
			"};"
		],
		"description": "Code snippet for union"
	},
	"cout": {
		"prefix": "cout",
		"body": [
			"std::cout << \"${1:/* message */}\" << std::endl;"
		],
		"description": "Code snippet for printing to std::cout, provided the header is set"
	},
	"#inc": {
		"prefix": "#inc",
		"body": [
			"#include \"$1"
		],
		"description": "Code snippet for #include \" \""
	},
	"#inc<": {
		"prefix": "#inc<",
		"body": [
			"#include <$1"
		],
		"description": "Code snippet for #include \" \""
	},
	"#def": {
		"prefix": "#def",
		"body": [
			"#define \"$1\" \"$2\" "
		],
		"description": "Code snippet for #define \" \""
	},
	"main": {
		"prefix": "main",
		"body": [
			"int main(int argc, const char** argv) {",
			"    $0",
			"    return 0;",
			"}"
		],
		"description": "Code snippet for main function"
	},
	// "header guard": {
	// 	"prefix": "guard",
	// 	"body": [
	// 		"#ifndef ${WORKSPACE_NAME/(.*)/${1:/upcase}/}_${RELATIVE_FILEPATH/([^\\.\\\\]*)([\\.\\\\])*/${1:/upcase}${2:+_}/g}_",
	// 		"#define ${WORKSPACE_NAME/(.*)/${1:/upcase}/}_${RELATIVE_FILEPATH/([^\\.\\\\]*)([\\.\\\\])*/${1:/upcase}${2:+_}/g}_",
	// 		"",
	// 		"$0",
	// 		"",
	// 		"#endif // ${WORKSPACE_NAME/(.*)/${1:/upcase}/}_${RELATIVE_FILEPATH/([^\\.\\\\]*)([\\.\\\\])*/${1:/upcase}${2:+_}/g}_"
	// 	],
	// 	"description": "Code snippet for header guard"
	// }
	// "header guard": {
	// 	"prefix": "guard",
	// 	"body": [
	// 		"#ifndef ${TM_FILENAME_BASE/(.*)/${1:/upcase}/}_H",
	// 		"#define ${TM_FILENAME_BASE/(.*)/${1:/upcase}/}_H",
	// 		"",
	// 		"$0",
	// 		"",
	// 		"#endif // ${TM_FILENAME_BASE/(.*)/${1:/upcase}/}_H"
	// 	],
	// 	"description": "Code snippet for header guard"
	// },
	"header guard": {
		"prefix": "guard",
		"body": [
			"#ifndef ${RELATIVE_FILEPATH/([^\\.\\/]*)([\\.\\/])*/${1:/upcase}${2:+_}/g}_",
			"#define ${RELATIVE_FILEPATH/([^\\.\\/]*)([\\.\\/])*/${1:/upcase}${2:+_}/g}_",
			"",
			"$0",
			"",
			"#endif // ${RELATIVE_FILEPATH/([^\\.\\/]*)([\\.\\/])*/${1:/upcase}${2:+_}/g}_"
		],
		"description": "Code snippet for header guard"
	},
	"unit test": {
		"prefix": "test",
		"body": "int main(int argc, char** argv) { return ::leveldb::test::RunAllTests(); }",
		"description": "Code snippet for uint test"
	}
}
